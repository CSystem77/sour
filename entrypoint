#!/usr/bin/env bash

set -e

CONFIG_DIR=${CONFIG_DIR:-/sour/config}

mkdir -p "$CONFIG_DIR"

# Validate the user's configuration and export the combined config
export SOUR_CONFIG=$(cue export /sour/schema.cue /sour/config.yaml $(find $CONFIG_DIR -name '*.json' -or -name '*.yaml' -or -name '*.cue'))

if [ -z "$SOUR_CONFIG" ]; then
  echo "A Sour config must be defined."
fi

CLIENT_CONFIG=$(echo "$SOUR_CONFIG" | jq '.client')
# Inject the runtime configuration into the frontend's code
# When a container is restarted, the previous FS state still exists, so detect this
if ! grep -q "INJECTED_SOUR_CONFIG" /app/index.js; then
  echo "const INJECTED_SOUR_CONFIG = $CLIENT_CONFIG;" >> /tmp/out.js
  cat /app/index.js >> /tmp/out.js
  cp /tmp/out.js /app/index.js
fi

wsproxy 28785 &
nginx -g 'daemon off;' &
(mkdir -p /redis && cd /redis && redis-server /sour/redis.conf) &
sleep 1
cluster $CLUSTER_ARGS &

tail -F /bin/entrypoint
